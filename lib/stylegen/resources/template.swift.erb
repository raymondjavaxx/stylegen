//
//  <%= @data.basename %>
//
//  Autogenerated by stylegen (<%= @data.version %>)
//  DO NOT EDIT
//

import UIKit

<%= @data.access_level %> struct <%= @data.struct_name %> {

    let uiColor: UIColor

    fileprivate init(white: CGFloat, alpha: CGFloat) {
        self.uiColor = UIColor(white: white, alpha: alpha)
    }

    fileprivate init(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat) {
        self.uiColor = UIColor(red: red, green: green, blue: blue, alpha: alpha)
    }

    fileprivate init(_ color: UIColor) {
        self.uiColor = color
    }

    fileprivate init(light: <%= @data.struct_name %>, dark: <%= @data.struct_name %>) {
        if #available(iOS 13.0, *) {
            self.uiColor = UIColor(dynamicProvider: { (traits: UITraitCollection) -> UIColor in
                switch traits.userInterfaceStyle {
                case .dark:
                    return dark.uiColor
                default:
                    return light.uiColor
                }
            })
        } else {
            self.uiColor = light.uiColor
        }
    }

    fileprivate init(base: <%= @data.struct_name %>, elevated: <%= @data.struct_name %>) {
        if #available(iOS 13.0, *) {
            self.uiColor = UIColor(dynamicProvider: { (traits: UITraitCollection) -> UIColor in
                switch traits.userInterfaceLevel {
                case .elevated:
                    return elevated.uiColor
                default:
                    return base.uiColor
                }
            })
        } else {
            self.uiColor = base.uiColor
        }
    }

}

// MARK: Colors

<%= @data.access_level %> extension <%= @data.struct_name %> {
<% @data.colors.each do |member, color| %>
    static let <%= member %> = <%= color.to_s(@data.struct_name, 4) %>
<% end %>
}

// MARK: - Extensions

<%= @data.access_level %> extension UIColor {

    @inline(__always)
    static func <%= @data.util_method_name %>(_ color: <%= @data.struct_name %>) -> UIColor {
        return color.uiColor
    }

}

<%= @data.access_level %> extension CGColor {

    @inline(__always)
    static func <%= @data.util_method_name %>(_ color: <%= @data.struct_name %>) -> CGColor {
        return color.uiColor.cgColor
    }

}
